{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/promminvutivivatchai/house-price-prediction-pv?scriptVersionId=189981221\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"raw","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom pandas.plotting import scatter_matrix\nimport math\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-27T03:53:00.381761Z","iopub.execute_input":"2024-07-27T03:53:00.382638Z","iopub.status.idle":"2024-07-27T03:53:00.783158Z","shell.execute_reply.started":"2024-07-27T03:53:00.382602Z","shell.execute_reply":"2024-07-27T03:53:00.782054Z"}}},{"cell_type":"markdown","source":"# Explore data","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\ntrain_data = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/train.csv')\ntest_data = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:10.437165Z","iopub.execute_input":"2024-07-27T10:41:10.437622Z","iopub.status.idle":"2024-07-27T10:41:10.494226Z","shell.execute_reply.started":"2024-07-27T10:41:10.437589Z","shell.execute_reply":"2024-07-27T10:41:10.492873Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:10.496721Z","iopub.execute_input":"2024-07-27T10:41:10.49714Z","iopub.status.idle":"2024-07-27T10:41:10.523314Z","shell.execute_reply.started":"2024-07-27T10:41:10.497106Z","shell.execute_reply":"2024-07-27T10:41:10.522072Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:10.524645Z","iopub.execute_input":"2024-07-27T10:41:10.525018Z","iopub.status.idle":"2024-07-27T10:41:10.554698Z","shell.execute_reply.started":"2024-07-27T10:41:10.524988Z","shell.execute_reply":"2024-07-27T10:41:10.553426Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:10.55767Z","iopub.execute_input":"2024-07-27T10:41:10.558316Z","iopub.status.idle":"2024-07-27T10:41:10.56712Z","shell.execute_reply.started":"2024-07-27T10:41:10.558281Z","shell.execute_reply":"2024-07-27T10:41:10.56586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Select Attributes\n- For simply, consider only number-attributes","metadata":{}},{"cell_type":"code","source":"train_num =  train_data.copy()\ntrain_num = train_num.select_dtypes(include=['float64', 'int64'])\ntrain_num.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:10.569048Z","iopub.execute_input":"2024-07-27T10:41:10.569537Z","iopub.status.idle":"2024-07-27T10:41:10.585176Z","shell.execute_reply.started":"2024-07-27T10:41:10.569499Z","shell.execute_reply":"2024-07-27T10:41:10.583902Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"attribute = ['LotArea', 'OverallQual',\n       'OverallCond', 'YearBuilt', 'YearRemodAdd','TotalBsmtSF',\n       'LowQualFinSF', 'GrLivArea', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', \n       'GarageCars',  'MiscVal', 'YrSold', 'LotFrontage','Fireplaces','WoodDeckSF',\n       'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea','SalePrice']\ntrain_num = train_num[attribute]","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:10.586864Z","iopub.execute_input":"2024-07-27T10:41:10.58765Z","iopub.status.idle":"2024-07-27T10:41:10.597356Z","shell.execute_reply.started":"2024-07-27T10:41:10.587616Z","shell.execute_reply":"2024-07-27T10:41:10.596169Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"corr_candidate = train_num.corr()['SalePrice'].sort_values(ascending=False)\nprint(corr_candidate)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:10.599056Z","iopub.execute_input":"2024-07-27T10:41:10.599519Z","iopub.status.idle":"2024-07-27T10:41:10.615319Z","shell.execute_reply.started":"2024-07-27T10:41:10.599476Z","shell.execute_reply":"2024-07-27T10:41:10.614071Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"select_attr_num = corr_candidate[abs(corr_candidate.values) > 0.3].index\nselect_attr_num","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:10.616877Z","iopub.execute_input":"2024-07-27T10:41:10.617329Z","iopub.status.idle":"2024-07-27T10:41:10.627Z","shell.execute_reply.started":"2024-07-27T10:41:10.617288Z","shell.execute_reply":"2024-07-27T10:41:10.625836Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"train_attr_num = train_num[select_attr_num]\ntrain_attr_num.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:10.628467Z","iopub.execute_input":"2024-07-27T10:41:10.628818Z","iopub.status.idle":"2024-07-27T10:41:10.65136Z","shell.execute_reply.started":"2024-07-27T10:41:10.628765Z","shell.execute_reply":"2024-07-27T10:41:10.650102Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"train_attr_num.hist(bins=50, figsize=(14,10))","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:10.65673Z","iopub.execute_input":"2024-07-27T10:41:10.657157Z","iopub.status.idle":"2024-07-27T10:41:14.316269Z","shell.execute_reply.started":"2024-07-27T10:41:10.657125Z","shell.execute_reply":"2024-07-27T10:41:14.314847Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" - Don't need to convert them to normal distribution.\n ","metadata":{}},{"cell_type":"markdown","source":"# Clean Data","metadata":{}},{"cell_type":"code","source":"train_attr_num.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:14.317872Z","iopub.execute_input":"2024-07-27T10:41:14.318301Z","iopub.status.idle":"2024-07-27T10:41:14.330649Z","shell.execute_reply.started":"2024-07-27T10:41:14.318262Z","shell.execute_reply":"2024-07-27T10:41:14.32915Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Fill null with median value to 'LotFrontage' attribute.","metadata":{}},{"cell_type":"code","source":"train_attr_num['LotFrontage'].fillna(train_attr_num['LotFrontage'].median(), inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:14.332386Z","iopub.execute_input":"2024-07-27T10:41:14.332854Z","iopub.status.idle":"2024-07-27T10:41:14.343583Z","shell.execute_reply.started":"2024-07-27T10:41:14.332815Z","shell.execute_reply":"2024-07-27T10:41:14.342155Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_attr_num.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:14.344993Z","iopub.execute_input":"2024-07-27T10:41:14.345371Z","iopub.status.idle":"2024-07-27T10:41:14.357377Z","shell.execute_reply.started":"2024-07-27T10:41:14.345338Z","shell.execute_reply":"2024-07-27T10:41:14.356111Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Check duplicate rows","metadata":{}},{"cell_type":"code","source":"train_attr_num.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:14.358918Z","iopub.execute_input":"2024-07-27T10:41:14.359279Z","iopub.status.idle":"2024-07-27T10:41:14.372629Z","shell.execute_reply.started":"2024-07-27T10:41:14.359239Z","shell.execute_reply":"2024-07-27T10:41:14.371101Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"None of duplicated row","metadata":{}},{"cell_type":"markdown","source":"# Quick train machine learning model","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\nX = train_attr_num[['OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF',\n       'FullBath', 'YearBuilt', 'YearRemodAdd', 'Fireplaces', 'LotFrontage',\n       'WoodDeckSF', 'OpenPorchSF']]\ny = train_attr_num['SalePrice']\n# train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:14.374183Z","iopub.execute_input":"2024-07-27T10:41:14.374549Z","iopub.status.idle":"2024-07-27T10:41:14.387987Z","shell.execute_reply.started":"2024-07-27T10:41:14.374511Z","shell.execute_reply":"2024-07-27T10:41:14.386707Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lin_model = LinearRegression().fit(X_train, y_train)\ny_pred = lin_model.predict(X_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:14.389825Z","iopub.execute_input":"2024-07-27T10:41:14.39025Z","iopub.status.idle":"2024-07-27T10:41:14.411179Z","shell.execute_reply.started":"2024-07-27T10:41:14.390217Z","shell.execute_reply":"2024-07-27T10:41:14.409292Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluation\nfrom sklearn.metrics import mean_squared_error\nRMSE = mean_squared_error(y_train, y_pred, squared=False)\nprint('RMSE = ', RMSE)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:14.413826Z","iopub.execute_input":"2024-07-27T10:41:14.415412Z","iopub.status.idle":"2024-07-27T10:41:14.429083Z","shell.execute_reply.started":"2024-07-27T10:41:14.415361Z","shell.execute_reply":"2024-07-27T10:41:14.427277Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Compared to sd.\ntrain_attr_num.describe() # sd. of SalePrice is 79442","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:14.432436Z","iopub.execute_input":"2024-07-27T10:41:14.434877Z","iopub.status.idle":"2024-07-27T10:41:14.557108Z","shell.execute_reply.started":"2024-07-27T10:41:14.434803Z","shell.execute_reply":"2024-07-27T10:41:14.55536Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Score = ', lin_model.score(X_train, y_train))","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:14.559368Z","iopub.execute_input":"2024-07-27T10:41:14.560158Z","iopub.status.idle":"2024-07-27T10:41:14.574147Z","shell.execute_reply.started":"2024-07-27T10:41:14.560106Z","shell.execute_reply":"2024-07-27T10:41:14.572381Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Improve Model - Clear Outliners, Normalize","metadata":{}},{"cell_type":"code","source":"# Visualize box plot - Outliners \nimport matplotlib.pyplot as plt\nfor column in train_attr_num:\n    plt.figure(figsize=(2,2))\n    train_attr_num.boxplot([column])","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:14.577144Z","iopub.execute_input":"2024-07-27T10:41:14.578247Z","iopub.status.idle":"2024-07-27T10:41:17.400542Z","shell.execute_reply.started":"2024-07-27T10:41:14.578191Z","shell.execute_reply":"2024-07-27T10:41:17.399318Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def filterOutliners(data, col):\n    Q1 = np.quantile(data[col], 0.25)\n    Q3 = np.quantile(data[col], 0.75)\n    IQR = Q3-Q1\n    lower_range = Q1-1.5*IQR\n    upper_range = Q3+1.5*IQR\n    #print('Q1 = ', Q1, ' Q3 = ', Q3)\n    #print('lower_range = ', lower_range, ' upper_range = ', upper_range)\n    outliner_free_list = [] #list\n\n    outliner_free_list = [x for x in data[col] if ((x >= lower_range) & (x <= upper_range))]\n    #print(len(outliner_free_list))\n\n    #print(outliner_free_list)\n    filtered_data = data[data[col].isin(outliner_free_list)] # True if this data is not an outliner\n    return filtered_data","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:17.402464Z","iopub.execute_input":"2024-07-27T10:41:17.402957Z","iopub.status.idle":"2024-07-27T10:41:17.412589Z","shell.execute_reply.started":"2024-07-27T10:41:17.402913Z","shell.execute_reply":"2024-07-27T10:41:17.411189Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"global filtered_train\ni = 0\nfor col in train_attr_num.columns:\n    if i == 0 :\n        filtered_train = filterOutliners(train_attr_num, col)\n        i += 1\n    else :\n        filtered_train = filterOutliners(filtered_train, col)\n    print('loop @column = ', col)\n    print(filtered_train.info())\n    ","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:17.414818Z","iopub.execute_input":"2024-07-27T10:41:17.41528Z","iopub.status.idle":"2024-07-27T10:41:17.516021Z","shell.execute_reply.started":"2024-07-27T10:41:17.415238Z","shell.execute_reply":"2024-07-27T10:41:17.514825Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"filtered_train","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:17.517442Z","iopub.execute_input":"2024-07-27T10:41:17.517822Z","iopub.status.idle":"2024-07-27T10:41:17.537816Z","shell.execute_reply.started":"2024-07-27T10:41:17.517765Z","shell.execute_reply":"2024-07-27T10:41:17.536447Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Visualize box plot - Outliners \nimport matplotlib.pyplot as plt\nfor column in filtered_train.columns:\n    plt.figure(figsize=(2,2))\n    filtered_train.boxplot([column])","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:17.539338Z","iopub.execute_input":"2024-07-27T10:41:17.539708Z","iopub.status.idle":"2024-07-27T10:41:19.486997Z","shell.execute_reply.started":"2024-07-27T10:41:17.539676Z","shell.execute_reply":"2024-07-27T10:41:19.485247Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Scaler (Normalization)","metadata":{}},{"cell_type":"code","source":"from sklearn import preprocessing\n\nmin_max_scaler = preprocessing.MinMaxScaler(feature_range=(-1,1))\nX = filtered_train.iloc[:,1:]\ny = filtered_train.iloc[:, 0]\n\nmin_max_scaler.fit(X)\n#print(min_max_scaler.transform(X))\nX_scaled = pd.DataFrame(min_max_scaler.transform(X), columns=X.columns)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:19.488616Z","iopub.execute_input":"2024-07-27T10:41:19.489002Z","iopub.status.idle":"2024-07-27T10:41:19.503807Z","shell.execute_reply.started":"2024-07-27T10:41:19.488971Z","shell.execute_reply":"2024-07-27T10:41:19.502056Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_scaled.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:19.505381Z","iopub.execute_input":"2024-07-27T10:41:19.505826Z","iopub.status.idle":"2024-07-27T10:41:19.532048Z","shell.execute_reply.started":"2024-07-27T10:41:19.50579Z","shell.execute_reply":"2024-07-27T10:41:19.530521Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Train & Evaluate (After Removing Outliners, Normalizing)","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.33, random_state=42)\nlin_model2 = LinearRegression().fit(X_train, y_train)\ny_pred2 = lin_model2.predict(X_train)\nprint('Score = ', lin_model2.score(X_train,y_train))\nprint('RMSE = ', mean_squared_error(y_train, y_pred2, squared=False))","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:19.533899Z","iopub.execute_input":"2024-07-27T10:41:19.534261Z","iopub.status.idle":"2024-07-27T10:41:19.556999Z","shell.execute_reply.started":"2024-07-27T10:41:19.534231Z","shell.execute_reply":"2024-07-27T10:41:19.555524Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Y_pred = pd.DataFrame({'y_train':y_train, 'y_pred2':y_pred2})\nY_pred.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:19.56404Z","iopub.execute_input":"2024-07-27T10:41:19.56442Z","iopub.status.idle":"2024-07-27T10:41:19.578444Z","shell.execute_reply.started":"2024-07-27T10:41:19.564391Z","shell.execute_reply":"2024-07-27T10:41:19.576983Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Results from 2 models \n* model 1 -> fill na value with median : Score =  0.7647 RMSE =  36934.28\n\n* model 2 -> remove outliners and normalize data with -1 to 1 range : Score = 0.8368 RMSE = 23058.18\n\n* **So, we choose the model 2 for testing.**","metadata":{}},{"cell_type":"markdown","source":"## Test","metadata":{}},{"cell_type":"code","source":"y_pred_test = lin_model2.predict(X_test)\nprint('Score =', lin_model2.score(X_test, y_test))\nprint('RMSE = ', mean_squared_error(y_test, y_pred_test, squared=False))","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:41:19.579805Z","iopub.execute_input":"2024-07-27T10:41:19.580219Z","iopub.status.idle":"2024-07-27T10:41:19.595253Z","shell.execute_reply.started":"2024-07-27T10:41:19.580176Z","shell.execute_reply":"2024-07-27T10:41:19.593524Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## For Submission","metadata":{}},{"cell_type":"code","source":"ID = test_data['Id']\ntest_data.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:52:44.55669Z","iopub.execute_input":"2024-07-27T10:52:44.558149Z","iopub.status.idle":"2024-07-27T10:52:44.591013Z","shell.execute_reply.started":"2024-07-27T10:52:44.558101Z","shell.execute_reply":"2024-07-27T10:52:44.589331Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Choosing only attributes that we will use\nX_test_actual = test_data[['OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath',\n       'YearBuilt', 'YearRemodAdd', 'Fireplaces', 'LotFrontage', 'WoodDeckSF',\n       'OpenPorchSF']]","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:44:47.406711Z","iopub.execute_input":"2024-07-27T10:44:47.407182Z","iopub.status.idle":"2024-07-27T10:44:47.415093Z","shell.execute_reply.started":"2024-07-27T10:44:47.407106Z","shell.execute_reply":"2024-07-27T10:44:47.41368Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test_actual.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:44:54.730581Z","iopub.execute_input":"2024-07-27T10:44:54.730996Z","iopub.status.idle":"2024-07-27T10:44:54.750548Z","shell.execute_reply.started":"2024-07-27T10:44:54.730965Z","shell.execute_reply":"2024-07-27T10:44:54.749182Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#scaling test data\nscaler_test = preprocessing.MinMaxScaler(feature_range=(-1,1))\nscaler_test.fit(X_test_actual)\nX_test_actual_scaled = pd.DataFrame(scaler_test.transform(X_test_actual), columns=X_test_actual.columns)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:53:10.935012Z","iopub.execute_input":"2024-07-27T10:53:10.935455Z","iopub.status.idle":"2024-07-27T10:53:10.947601Z","shell.execute_reply.started":"2024-07-27T10:53:10.935421Z","shell.execute_reply":"2024-07-27T10:53:10.946371Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test_actual_scaled.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:56:17.118936Z","iopub.execute_input":"2024-07-27T10:56:17.11939Z","iopub.status.idle":"2024-07-27T10:56:17.129596Z","shell.execute_reply.started":"2024-07-27T10:56:17.119352Z","shell.execute_reply":"2024-07-27T10:56:17.128113Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"X_test_actual_scaled['LotFrontage'].fillna(X_test_actual_scaled['LotFrontage'].median(), inplace=True)\nX_test_actual_scaled['GarageCars'].fillna(X_test_actual_scaled['GarageCars'].median(), inplace=True)\nX_test_actual_scaled['TotalBsmtSF'].fillna(X_test_actual_scaled['TotalBsmtSF'].median(), inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:57:15.380931Z","iopub.execute_input":"2024-07-27T10:57:15.382034Z","iopub.status.idle":"2024-07-27T10:57:15.393767Z","shell.execute_reply.started":"2024-07-27T10:57:15.381992Z","shell.execute_reply":"2024-07-27T10:57:15.39233Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test_actual_scaled.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:57:35.035006Z","iopub.execute_input":"2024-07-27T10:57:35.035427Z","iopub.status.idle":"2024-07-27T10:57:35.045095Z","shell.execute_reply.started":"2024-07-27T10:57:35.035391Z","shell.execute_reply":"2024-07-27T10:57:35.04374Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_actual_pred = lin_model2.predict(X_test_actual_scaled)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:57:38.027276Z","iopub.execute_input":"2024-07-27T10:57:38.027667Z","iopub.status.idle":"2024-07-27T10:57:38.039449Z","shell.execute_reply.started":"2024-07-27T10:57:38.027636Z","shell.execute_reply":"2024-07-27T10:57:38.037886Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result = pd.DataFrame({'Id':ID, 'SalePrice':y_actual_pred})\nresult","metadata":{"execution":{"iopub.status.busy":"2024-07-27T10:59:30.875173Z","iopub.execute_input":"2024-07-27T10:59:30.875618Z","iopub.status.idle":"2024-07-27T10:59:30.890843Z","shell.execute_reply.started":"2024-07-27T10:59:30.875584Z","shell.execute_reply":"2024-07-27T10:59:30.88964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result.to_csv('/kaggle/working/result.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T11:04:20.320076Z","iopub.execute_input":"2024-07-27T11:04:20.320559Z","iopub.status.idle":"2024-07-27T11:04:20.333806Z","shell.execute_reply.started":"2024-07-27T11:04:20.320525Z","shell.execute_reply":"2024-07-27T11:04:20.332384Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}