{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/promminvutivivatchai/digit-recog-pv?scriptVersionId=190710953\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-01T07:44:20.695784Z","iopub.execute_input":"2024-08-01T07:44:20.69625Z","iopub.status.idle":"2024-08-01T07:44:20.707129Z","shell.execute_reply.started":"2024-08-01T07:44:20.696215Z","shell.execute_reply":"2024-08-01T07:44:20.705929Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from warnings import simplefilter\nfrom sklearn.exceptions import ConvergenceWarning\nsimplefilter(\"ignore\", category=ConvergenceWarning)\n\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.svm import SVC\n\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn.metrics import precision_score, recall_score, f1_score\n\nfrom sklearn.preprocessing import StandardScaler\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:20.709886Z","iopub.execute_input":"2024-08-01T07:44:20.711202Z","iopub.status.idle":"2024-08-01T07:44:20.720749Z","shell.execute_reply.started":"2024-08-01T07:44:20.711163Z","shell.execute_reply":"2024-08-01T07:44:20.719382Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:20.721968Z","iopub.execute_input":"2024-08-01T07:44:20.722338Z","iopub.status.idle":"2024-08-01T07:44:24.081779Z","shell.execute_reply.started":"2024-08-01T07:44:20.7223Z","shell.execute_reply":"2024-08-01T07:44:24.0804Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:24.083473Z","iopub.execute_input":"2024-08-01T07:44:24.083846Z","iopub.status.idle":"2024-08-01T07:44:24.109246Z","shell.execute_reply.started":"2024-08-01T07:44:24.083815Z","shell.execute_reply":"2024-08-01T07:44:24.108052Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y = train['label']\nX = train.iloc[:, 1:]","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:24.112617Z","iopub.execute_input":"2024-08-01T07:44:24.113423Z","iopub.status.idle":"2024-08-01T07:44:24.12056Z","shell.execute_reply.started":"2024-08-01T07:44:24.113381Z","shell.execute_reply":"2024-08-01T07:44:24.119335Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:24.121962Z","iopub.execute_input":"2024-08-01T07:44:24.122346Z","iopub.status.idle":"2024-08-01T07:44:24.134924Z","shell.execute_reply.started":"2024-08-01T07:44:24.122305Z","shell.execute_reply":"2024-08-01T07:44:24.13366Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X.iloc[0,:]","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:24.136379Z","iopub.execute_input":"2024-08-01T07:44:24.136746Z","iopub.status.idle":"2024-08-01T07:44:24.150543Z","shell.execute_reply.started":"2024-08-01T07:44:24.136717Z","shell.execute_reply":"2024-08-01T07:44:24.149357Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\ndef visualizeNum(pixeldata):\n        # convert 784 pixel to 28*28 squared matrix\n    number_pixel = pixeldata.to_numpy().reshape(28,28)\n    plt.imshow(number_pixel, cmap='binary') # cmap = coloring, binary = black white\n    plt.axis('off')\n\n# example : \nvisualizeNum(X.iloc[2,:])","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:24.151838Z","iopub.execute_input":"2024-08-01T07:44:24.152544Z","iopub.status.idle":"2024-08-01T07:44:24.270554Z","shell.execute_reply.started":"2024-08-01T07:44:24.152501Z","shell.execute_reply":"2024-08-01T07:44:24.268707Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(3,3))\ncount = 0\nfor i in range(25):\n    plt.subplot(5,5,i+1) # ex. subplot(5,5,1) -> layout 5*5, place current img to 1st position , ...., subplot (5,5,26) = place 25th picture\n    plt.subplots_adjust(wspace=0, hspace=0)\n    visualizeNum(X.iloc[i,:])","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:24.272541Z","iopub.execute_input":"2024-08-01T07:44:24.273Z","iopub.status.idle":"2024-08-01T07:44:25.297434Z","shell.execute_reply.started":"2024-08-01T07:44:24.272961Z","shell.execute_reply":"2024-08-01T07:44:25.296243Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"check_na = X.isna().sum()\ncheck_na[check_na!=0]\n# none of null value in every attribute","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:25.299511Z","iopub.execute_input":"2024-08-01T07:44:25.300386Z","iopub.status.idle":"2024-08-01T07:44:25.341149Z","shell.execute_reply.started":"2024-08-01T07:44:25.300343Z","shell.execute_reply":"2024-08-01T07:44:25.339935Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.33)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:25.342643Z","iopub.execute_input":"2024-08-01T07:44:25.343012Z","iopub.status.idle":"2024-08-01T07:44:25.595177Z","shell.execute_reply.started":"2024-08-01T07:44:25.342982Z","shell.execute_reply":"2024-08-01T07:44:25.593951Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Trying simple classification \n- Binary classification ('5' or not)\n","metadata":{}},{"cell_type":"code","source":"y_train_5 = (y_train == 5)\ny_test_5 = (y_test == 5)\ny_train_5[:4]","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:25.596852Z","iopub.execute_input":"2024-08-01T07:44:25.597237Z","iopub.status.idle":"2024-08-01T07:44:25.607666Z","shell.execute_reply.started":"2024-08-01T07:44:25.597206Z","shell.execute_reply":"2024-08-01T07:44:25.606485Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nlog_model1 = LogisticRegression(random_state=42).fit(X_train, y_train_5)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:25.613626Z","iopub.execute_input":"2024-08-01T07:44:25.614261Z","iopub.status.idle":"2024-08-01T07:44:29.036831Z","shell.execute_reply.started":"2024-08-01T07:44:25.614229Z","shell.execute_reply":"2024-08-01T07:44:29.035131Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"visualizeNum(X.iloc[8,:])\nlog_model1.predict([X.iloc[8,:]])","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:29.038881Z","iopub.execute_input":"2024-08-01T07:44:29.0424Z","iopub.status.idle":"2024-08-01T07:44:29.213172Z","shell.execute_reply.started":"2024-08-01T07:44:29.042342Z","shell.execute_reply":"2024-08-01T07:44:29.211943Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"visualizeNum(X.iloc[0,:])\nlog_model1.predict([X.iloc[0,:]])","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:29.215163Z","iopub.execute_input":"2024-08-01T07:44:29.215995Z","iopub.status.idle":"2024-08-01T07:44:29.346657Z","shell.execute_reply.started":"2024-08-01T07:44:29.215952Z","shell.execute_reply":"2024-08-01T07:44:29.345388Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Performance Measures\n","metadata":{}},{"cell_type":"code","source":"cross_val_score(log_model1, X_train, y_train_5, cv=5, scoring='accuracy')","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:29.348896Z","iopub.execute_input":"2024-08-01T07:44:29.349735Z","iopub.status.idle":"2024-08-01T07:44:40.900335Z","shell.execute_reply.started":"2024-08-01T07:44:29.349692Z","shell.execute_reply":"2024-08-01T07:44:40.898849Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- Getting high accuracy because the number of 'not 5' labels are larger than '5' labels.\n- Next, testing with dummy classifier (baseline classifier) that is a simplest machine learning classifier, and then compare to previous logistic regression model","metadata":{}},{"cell_type":"code","source":"\n\ndummy_clf = DummyClassifier(random_state=42).fit(X_train, y_train_5)\ncross_val_score(dummy_clf, X_train, y_train_5, cv=5, scoring=\"accuracy\")","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:40.902982Z","iopub.execute_input":"2024-08-01T07:44:40.904101Z","iopub.status.idle":"2024-08-01T07:44:41.356459Z","shell.execute_reply.started":"2024-08-01T07:44:40.904043Z","shell.execute_reply":"2024-08-01T07:44:41.355332Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- Dummy classifier gives 90.xx% of accuracy score.\n- Imply that we can get 90% accuracy score without logistic regression model.\n- Imply that measuring performance by accuracy score may be not good metric for classification model because the probability of occurring '5' is very low. The model can predict 'not 5' labels easily. \n- Insteadly, using of confusion matrix is more prefered.","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# Confusion Matrix","metadata":{}},{"cell_type":"markdown","source":"## Cross Validation Prediction (using library)","metadata":{}},{"cell_type":"code","source":"\ny_train_pred = cross_val_predict(log_model1, X_train, y_train_5, cv=5)\nprint('y_train_pred = ', y_train_pred)\nprint('total of prediction points = ', len(y_train_pred))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:41.357846Z","iopub.execute_input":"2024-08-01T07:44:41.358195Z","iopub.status.idle":"2024-08-01T07:44:52.846838Z","shell.execute_reply.started":"2024-08-01T07:44:41.358167Z","shell.execute_reply":"2024-08-01T07:44:52.845395Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- cross validation prediction divides train set into 5 folds , and test set in each fold used for model prediction.\n- we can implement cross validation prediction manuallt to inspect the result.","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"## Cross Validation Prediction (Alternative)","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import StratifiedKFold # provides train/test indices to split data in train/test sets.\nfrom sklearn.base import clone # copy the model without attached data (unfitted model)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:52.849349Z","iopub.execute_input":"2024-08-01T07:44:52.8504Z","iopub.status.idle":"2024-08-01T07:44:52.862574Z","shell.execute_reply.started":"2024-08-01T07:44:52.850345Z","shell.execute_reply":"2024-08-01T07:44:52.861075Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"type(y_train_5)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:52.867706Z","iopub.execute_input":"2024-08-01T07:44:52.869267Z","iopub.status.idle":"2024-08-01T07:44:52.887951Z","shell.execute_reply.started":"2024-08-01T07:44:52.86921Z","shell.execute_reply":"2024-08-01T07:44:52.886464Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Because of train_test_split , some index may not be in train set -> lead to index error when implementing K-Fold below\n # reset index or convert dataframe/serie to numpy array to resolve this error.\nX_train = X_train.to_numpy() \ny_train_5 = y_train_5.to_numpy()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:52.89017Z","iopub.execute_input":"2024-08-01T07:44:52.892037Z","iopub.status.idle":"2024-08-01T07:44:52.909495Z","shell.execute_reply.started":"2024-08-01T07:44:52.891982Z","shell.execute_reply":"2024-08-01T07:44:52.907761Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nskfolds = StratifiedKFold(n_splits=5) # This data is already shuffled, if not, we can set shuffle=True and random_state=42.\nfold = 0\nn_tested = 0\nfor train_index, test_index in skfolds.split(X_train, y_train_5):\n    #print(train_index, test_index)\n    fold += 1\n    clone_clf = clone(log_model1) # copy of logistic model without fitting data (in each fold)\n    X_train_folds = X_train[train_index,:]\n    X_test_folds = X_train[test_index,:]\n    y_train_folds = y_train_5[train_index]\n    y_test_folds = y_train_5[test_index]\n    \n    clone_clf.fit(X_train_folds, y_train_folds)\n    y_pred = clone_clf.predict(X_test_folds) # predicted y value in each fold\n    print(y_pred)\n    print('n_sample = ', len(y_pred))\n    n_corrects = sum(y_pred == y_test_folds)\n    print('n_corrects = ', n_corrects)\n    print('accuracy = ', n_corrects/len(y_pred))\n    n_tested += len(y_pred)\n    print('finish fold_no = ', fold, ', n_tested = ', n_tested)\n\n    print('----------------------------------------------')\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:44:52.912165Z","iopub.execute_input":"2024-08-01T07:44:52.913258Z","iopub.status.idle":"2024-08-01T07:45:03.188812Z","shell.execute_reply.started":"2024-08-01T07:44:52.913206Z","shell.execute_reply":"2024-08-01T07:45:03.187127Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- Noted that there are 5 results from 5 folds, 5628 samples for each fold\n- Noted that each validation set in each fold is not repeated.\n- When combining every result sets, we will get prediction for all of training dataset.\n","metadata":{}},{"cell_type":"markdown","source":"** We will use y_train_pred prediction result from cross_val_predict() to build a confusion matrix\n**","metadata":{}},{"cell_type":"code","source":"cm = confusion_matrix(y_train_5, y_train_pred)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:03.190592Z","iopub.execute_input":"2024-08-01T07:45:03.191413Z","iopub.status.idle":"2024-08-01T07:45:03.207738Z","shell.execute_reply.started":"2024-08-01T07:45:03.191372Z","shell.execute_reply":"2024-08-01T07:45:03.20618Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(cm)\n# positive = '5'\n# negative  = not '5'","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:03.209823Z","iopub.execute_input":"2024-08-01T07:45:03.210483Z","iopub.status.idle":"2024-08-01T07:45:03.218256Z","shell.execute_reply.started":"2024-08-01T07:45:03.210428Z","shell.execute_reply":"2024-08-01T07:45:03.216809Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cm[0][0]","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:03.220231Z","iopub.execute_input":"2024-08-01T07:45:03.220816Z","iopub.status.idle":"2024-08-01T07:45:03.232632Z","shell.execute_reply.started":"2024-08-01T07:45:03.220769Z","shell.execute_reply":"2024-08-01T07:45:03.231227Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cm_disp = ConfusionMatrixDisplay(cm)\ncm_disp.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:03.235058Z","iopub.execute_input":"2024-08-01T07:45:03.236659Z","iopub.status.idle":"2024-08-01T07:45:03.54053Z","shell.execute_reply.started":"2024-08-01T07:45:03.236609Z","shell.execute_reply":"2024-08-01T07:45:03.539336Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- True label (aka. Actual label)\n- 0 = Negative = 'not 5', 1 = Positive = '5'\n- [Actual Negative-Predicted Negative (True Negative -TN), Actual Negative-Predicted Positive (False Positive -FP)\n-   Actual Positive-Predicted Negative (False Negative -FN), Actual Positive-Predicted Positive (True Positive -TP)]\n","metadata":{}},{"cell_type":"markdown","source":"## Precision/ Recall/ F1-score","metadata":{}},{"cell_type":"code","source":"# manual calculation\nTN, FP, FN, TP = cm[0][0], cm[0][1], cm[1][0], cm[1][1]\nprecision = TP/(TP+FP) # precision = Success Positive Predicted / (Success Positive Predicted + Failed Positive Predicted)\nrecall = TP/(TP+FN)  # False Negative = Predicted Negative, but Actual Positive, so recall = true positive predicted / total actual positive\nF1 = 2*((precision*recall)/(precision+recall))\nprint('Precision =', precision)\nprint('Recall = ', recall)\nprint('F1 score = ', F1)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:03.542243Z","iopub.execute_input":"2024-08-01T07:45:03.542767Z","iopub.status.idle":"2024-08-01T07:45:03.551728Z","shell.execute_reply.started":"2024-08-01T07:45:03.542726Z","shell.execute_reply":"2024-08-01T07:45:03.550533Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# from sklearn\nprecision_lib = precision_score(y_train_5, y_train_pred)\nrecall_lib = recall_score(y_train_5, y_train_pred)\nf1_lib = f1_score(y_train_5, y_train_pred)\nprint('Precision (sklearn) = ', precision_lib)\nprint('Recall (sklearn) = ', recall_lib)\nprint('F1 score (sklearn) = ', f1_lib)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:03.553203Z","iopub.execute_input":"2024-08-01T07:45:03.553576Z","iopub.status.idle":"2024-08-01T07:45:03.596605Z","shell.execute_reply.started":"2024-08-01T07:45:03.553546Z","shell.execute_reply":"2024-08-01T07:45:03.5954Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Precision = 0.87 \nRecall = 0.81\nF1-score = 0.84 (average of precision and recall)","metadata":{}},{"cell_type":"markdown","source":"# Precision/ Recall Tuning","metadata":{}},{"cell_type":"code","source":"y_score = cross_val_predict(log_model1, X_train, y_train_5, cv=5, method='predict_proba') # logistic regression -> using proability score to decide, sgd -> using decision score (from decision function)\nprint(y_score) # y_score column 0 -> probability decision for class 0 (False) , column 1 -> prob for class 1 (True) \n\n# note: check order of class by log_model1.classes_","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:03.598006Z","iopub.execute_input":"2024-08-01T07:45:03.598359Z","iopub.status.idle":"2024-08-01T07:45:14.048333Z","shell.execute_reply.started":"2024-08-01T07:45:03.598329Z","shell.execute_reply":"2024-08-01T07:45:14.046801Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_score[:,1] # probability for class 1 (True)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:14.050777Z","iopub.execute_input":"2024-08-01T07:45:14.057651Z","iopub.status.idle":"2024-08-01T07:45:14.071183Z","shell.execute_reply.started":"2024-08-01T07:45:14.057587Z","shell.execute_reply":"2024-08-01T07:45:14.069794Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Precision-Recall Curve","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import precision_recall_curve\nprecision, recall, threshold = precision_recall_curve(y_train_5, y_score[:,1])\n#print(precision)\n#print(recall)\n#print(threshold)\nprint(len(threshold), len(precision), len(recall)) # shows that 28140, 28141, 28141 --> Last precision and recall value should be ignored (last value are 1 and 0 for precision and recall respectively).\n\nplt.figure()\nplt.plot(threshold, precision[:-1], label='Precision')\nplt.plot(threshold, recall[:-1], label='Recall')\nplt.xlabel('Threshold')\nplt.legend(bbox_to_anchor=(1.25, 1.02), loc='upper right')\n#plt.xlim(-15,)\nplt.title('Precision-Recall vs. Threshold')","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:14.074144Z","iopub.execute_input":"2024-08-01T07:45:14.075325Z","iopub.status.idle":"2024-08-01T07:45:14.482767Z","shell.execute_reply.started":"2024-08-01T07:45:14.075257Z","shell.execute_reply":"2024-08-01T07:45:14.481764Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure()\nplt.plot(precision, recall, label='Precision-Recall Curve')\nplt.xlabel('Precision')\nplt.ylabel('Recall')\nplt.title('Precision-Recall Curve')","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:14.484466Z","iopub.execute_input":"2024-08-01T07:45:14.484866Z","iopub.status.idle":"2024-08-01T07:45:14.810505Z","shell.execute_reply.started":"2024-08-01T07:45:14.484833Z","shell.execute_reply":"2024-08-01T07:45:14.809296Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- Suppose that we want high recall and moderate precision","metadata":{}},{"cell_type":"code","source":"ind = np.where((recall > 0.90) & (recall<0.905))[0][0]\nprint('recall = ', recall[ind], 'precision = ', precision[ind], 'threshold = ', threshold[ind])","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:14.812022Z","iopub.execute_input":"2024-08-01T07:45:14.812415Z","iopub.status.idle":"2024-08-01T07:45:14.819907Z","shell.execute_reply.started":"2024-08-01T07:45:14.812384Z","shell.execute_reply":"2024-08-01T07:45:14.818693Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- We will set threshold = 0.1712 for expected recall =0.90 and expected precision = 0.72","metadata":{}},{"cell_type":"code","source":"threshold_sel = 0.1712\ny_pred_cust_thres = np.where(log_model1.predict_proba(X_train)[:, 1] >= threshold_sel, 1, 0).astype(bool)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:14.821532Z","iopub.execute_input":"2024-08-01T07:45:14.822002Z","iopub.status.idle":"2024-08-01T07:45:14.933655Z","shell.execute_reply.started":"2024-08-01T07:45:14.821969Z","shell.execute_reply":"2024-08-01T07:45:14.931716Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred_cust_thres","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:14.936325Z","iopub.execute_input":"2024-08-01T07:45:14.936978Z","iopub.status.idle":"2024-08-01T07:45:14.94723Z","shell.execute_reply.started":"2024-08-01T07:45:14.936925Z","shell.execute_reply":"2024-08-01T07:45:14.94578Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_train_5","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:14.949671Z","iopub.execute_input":"2024-08-01T07:45:14.950256Z","iopub.status.idle":"2024-08-01T07:45:14.960539Z","shell.execute_reply.started":"2024-08-01T07:45:14.950203Z","shell.execute_reply":"2024-08-01T07:45:14.958864Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"precision_new = precision_score(y_train_5, y_pred_cust_thres)\nrecall_new = recall_score(y_train_5, y_pred_cust_thres)\nf1_new = f1_score(y_train_5, y_pred_cust_thres)\nprint('@threshold = 0.1712 (lower from default = 0.5)')\nprint('Precision = ', precision_new)\nprint('Recall = ', recall_new)\nprint('F1 score = ', f1_new)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:14.980846Z","iopub.execute_input":"2024-08-01T07:45:14.982409Z","iopub.status.idle":"2024-08-01T07:45:15.058416Z","shell.execute_reply.started":"2024-08-01T07:45:14.982345Z","shell.execute_reply":"2024-08-01T07:45:15.057535Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"compare_perf_df = pd.DataFrame({'threshold':[0.5, 0.1712], 'Precision':[precision_lib, precision_new], 'Recall':[recall_lib, recall_new], 'F1-Score':[f1_lib, f1_new]})","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:15.060482Z","iopub.execute_input":"2024-08-01T07:45:15.061773Z","iopub.status.idle":"2024-08-01T07:45:15.068726Z","shell.execute_reply.started":"2024-08-01T07:45:15.061722Z","shell.execute_reply":"2024-08-01T07:45:15.067372Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"compare_perf_df","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:15.070211Z","iopub.execute_input":"2024-08-01T07:45:15.07069Z","iopub.status.idle":"2024-08-01T07:45:15.093735Z","shell.execute_reply.started":"2024-08-01T07:45:15.07065Z","shell.execute_reply":"2024-08-01T07:45:15.092605Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### ROC Curve (Additional)","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import roc_curve\nfpr, tpr, thresholds = roc_curve(y_train_5, y_score[:, 1])","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:15.095195Z","iopub.execute_input":"2024-08-01T07:45:15.095679Z","iopub.status.idle":"2024-08-01T07:45:15.109343Z","shell.execute_reply.started":"2024-08-01T07:45:15.095635Z","shell.execute_reply":"2024-08-01T07:45:15.108107Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure()\nplt.plot(fpr, tpr, label='ROC Curve')\nplt.plot([0,1], [0,1], label='Random classifier\\'s ROC Curve', linestyle='dashed') # Classifier acts like random decision.\nplt.title('ROC Curve')\nplt.xlabel('False Positive Rate (Fall-Out)')\nplt.ylabel('True Positive Rate (Recall)')\nplt.grid()\nplt.legend(loc='lower right')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:15.111624Z","iopub.execute_input":"2024-08-01T07:45:15.112087Z","iopub.status.idle":"2024-08-01T07:45:15.435315Z","shell.execute_reply.started":"2024-08-01T07:45:15.112048Z","shell.execute_reply":"2024-08-01T07:45:15.434083Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- PR curve is commonly used when there are few positive-class samples in the dataset.\n- ROC curve is commonly used when there are many positive-class samples in the dataset.","metadata":{}},{"cell_type":"markdown","source":"### AUC - Area under the curve \nAUC of ROC \n- 0.5 for Random classifier (baseline)\n- AUC close to 1 for perfect classifier.","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score\nprint('AUC of ROC score = ', roc_auc_score(y_train_5, y_score[:, 1]))","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:15.436648Z","iopub.execute_input":"2024-08-01T07:45:15.437014Z","iopub.status.idle":"2024-08-01T07:45:15.456816Z","shell.execute_reply.started":"2024-08-01T07:45:15.436983Z","shell.execute_reply":"2024-08-01T07:45:15.455626Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Models Comparision\n- log_model1 -> Logistic Regression (/)\n- model2 -> SGD Classifier (-) ; Logistic Regression with SGD Training\n- model3 -> Random Forrest (-)","metadata":{}},{"cell_type":"code","source":"model2 = SGDClassifier(random_state=42)\nmodel2.fit(X_train, y_train_5)\ny_score_model2 = cross_val_predict(model2, X_train, y_train_5, method='decision_function', cv=5)\n\nmodel3 = RandomForestClassifier(random_state=42)\nmodel3.fit(X_train, y_train_5)\ny_score_model3 = cross_val_predict(model3, X_train, y_train_5, method='predict_proba', cv=5)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:45:15.458195Z","iopub.execute_input":"2024-08-01T07:45:15.458588Z","iopub.status.idle":"2024-08-01T07:47:20.71504Z","shell.execute_reply.started":"2024-08-01T07:45:15.458558Z","shell.execute_reply":"2024-08-01T07:47:20.713698Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_score_model2","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:47:20.716917Z","iopub.execute_input":"2024-08-01T07:47:20.717305Z","iopub.status.idle":"2024-08-01T07:47:20.72453Z","shell.execute_reply.started":"2024-08-01T07:47:20.717245Z","shell.execute_reply":"2024-08-01T07:47:20.723338Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model3.classes_ # class 0 = False, class 1 = True","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:47:20.726348Z","iopub.execute_input":"2024-08-01T07:47:20.726711Z","iopub.status.idle":"2024-08-01T07:47:20.740187Z","shell.execute_reply.started":"2024-08-01T07:47:20.726682Z","shell.execute_reply":"2024-08-01T07:47:20.738703Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_score_model3_pos = y_score_model3[:, 1]\ny_score_model3_pos","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:47:20.741643Z","iopub.execute_input":"2024-08-01T07:47:20.742906Z","iopub.status.idle":"2024-08-01T07:47:20.751645Z","shell.execute_reply.started":"2024-08-01T07:47:20.742861Z","shell.execute_reply":"2024-08-01T07:47:20.750472Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"precision_sgd, recall_sgd, thres_sgd = precision_recall_curve(y_train_5, y_score_model2)\nprecision_rf, recall_rf, thres_rf = precision_recall_curve(y_train_5, y_score_model3_pos)\n# Plotting PR Curve\nplt.figure()\nplt.plot(precision, recall, label='Logistic Regression')\nplt.plot(precision_sgd, recall_sgd, label='SGD')\nplt.plot(precision_rf, recall_rf, label='Random Forest')\nplt.legend(loc='lower left')\nplt.xlabel('Precision')\nplt.ylabel('Recall')","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:48:27.414892Z","iopub.execute_input":"2024-08-01T07:48:27.41534Z","iopub.status.idle":"2024-08-01T07:48:27.767429Z","shell.execute_reply.started":"2024-08-01T07:48:27.415299Z","shell.execute_reply":"2024-08-01T07:48:27.766047Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('AOC of Logistic Regression', roc_auc_score(y_train_5, y_score[:,1]))\nprint('AOC of SGD', roc_auc_score(y_train_5, y_score_model2))\nprint('AOC of Random Forest', roc_auc_score(y_train_5, y_score_model3_pos))","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:48:30.265015Z","iopub.execute_input":"2024-08-01T07:48:30.266009Z","iopub.status.idle":"2024-08-01T07:48:30.301196Z","shell.execute_reply.started":"2024-08-01T07:48:30.265972Z","shell.execute_reply":"2024-08-01T07:48:30.300107Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Multi-Class Classification\n- Every classifiers builted by sklearn have \"built-in\" multiclass classification support.\n- 2 techniques used in multiclass classification are One-Vs-One and One-Vs-The-Rest.","metadata":{}},{"cell_type":"code","source":"# Using Decision Tree for multiclass classification\nmodel4_multi_rf = RandomForestClassifier(random_state=42)\nmodel4_multi_rf.fit(X_train[:2000], y_train[:2000])\ny_pred_model4 = model4_multi_rf.predict(X_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:48:32.675671Z","iopub.execute_input":"2024-08-01T07:48:32.676095Z","iopub.status.idle":"2024-08-01T07:48:34.734388Z","shell.execute_reply.started":"2024-08-01T07:48:32.676063Z","shell.execute_reply":"2024-08-01T07:48:34.733355Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model4_multi_rf.predict([X_train[2]])","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:48:34.736216Z","iopub.execute_input":"2024-08-01T07:48:34.736675Z","iopub.status.idle":"2024-08-01T07:48:34.756424Z","shell.execute_reply.started":"2024-08-01T07:48:34.736642Z","shell.execute_reply":"2024-08-01T07:48:34.755314Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model4_multi_rf.predict_proba([X_train[2]])\n# len() = 10 -> get 10 models for 10 class -> This model uses One Vs Rest technique.","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:48:34.758523Z","iopub.execute_input":"2024-08-01T07:48:34.758894Z","iopub.status.idle":"2024-08-01T07:48:34.774811Z","shell.execute_reply.started":"2024-08-01T07:48:34.758864Z","shell.execute_reply":"2024-08-01T07:48:34.773609Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model4_multi_rf.score(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:48:35.003501Z","iopub.execute_input":"2024-08-01T07:48:35.004538Z","iopub.status.idle":"2024-08-01T07:48:35.772213Z","shell.execute_reply.started":"2024-08-01T07:48:35.004501Z","shell.execute_reply":"2024-08-01T07:48:35.771053Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.multiclass import OneVsOneClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\n# forcing classification technique in models\nforced_rf_ovo = OneVsOneClassifier(RandomForestClassifier(random_state=42)).fit(X_train[:2000], y_train[:2000]) # 45 models\nforced_rf_ovr = OneVsRestClassifier(RandomForestClassifier(random_state=42)).fit(X_train[:2000], y_train[:2000]) # 10 models","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:48:37.99767Z","iopub.execute_input":"2024-08-01T07:48:37.998089Z","iopub.status.idle":"2024-08-01T07:49:00.881398Z","shell.execute_reply.started":"2024-08-01T07:48:37.998058Z","shell.execute_reply":"2024-08-01T07:49:00.879865Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"forced_rf_ovo.score(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:49:00.8841Z","iopub.execute_input":"2024-08-01T07:49:00.884579Z","iopub.status.idle":"2024-08-01T07:49:24.914453Z","shell.execute_reply.started":"2024-08-01T07:49:00.884539Z","shell.execute_reply":"2024-08-01T07:49:24.913304Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"forced_rf_ovr.score(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:49:24.915704Z","iopub.execute_input":"2024-08-01T07:49:24.916021Z","iopub.status.idle":"2024-08-01T07:49:28.820525Z","shell.execute_reply.started":"2024-08-01T07:49:24.915993Z","shell.execute_reply":"2024-08-01T07:49:28.819295Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Note that \n- Accuracy can be used in this case because target label are '0-9' , not only '5'. -> No imbalance in data targets\n- The number of instances for each data label is nearly the same, so the model's accuracy is less likely to be an overestimate.\n- (If data target were only '5' or 'not 5', there would be an imbalance in predictions. In such cases, accuracy would not be prefered.)","metadata":{}},{"cell_type":"code","source":"y_train.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:49:28.822633Z","iopub.execute_input":"2024-08-01T07:49:28.822963Z","iopub.status.idle":"2024-08-01T07:49:28.838351Z","shell.execute_reply.started":"2024-08-01T07:49:28.822936Z","shell.execute_reply":"2024-08-01T07:49:28.837184Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Multiclass Model Selection","metadata":{}},{"cell_type":"code","source":"multi_log = LogisticRegression(random_state=42).fit(X_train, y_train)\nmulti_rf = RandomForestClassifier(random_state=42).fit(X_train[:2000], y_train[:2000]) # only 2000 data points\nmulti_sgd = SGDClassifier(random_state=42).fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:49:47.71717Z","iopub.execute_input":"2024-08-01T07:49:47.718011Z","iopub.status.idle":"2024-08-01T07:51:04.366662Z","shell.execute_reply.started":"2024-08-01T07:49:47.717973Z","shell.execute_reply":"2024-08-01T07:51:04.365366Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# support vector machine classifier\n\nmulti_svc = SVC(random_state=42).fit(X_train[:2000], y_train[:2000]) # only 2000 data points","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:51:04.369148Z","iopub.execute_input":"2024-08-01T07:51:04.369641Z","iopub.status.idle":"2024-08-01T07:51:05.185372Z","shell.execute_reply.started":"2024-08-01T07:51:04.369589Z","shell.execute_reply":"2024-08-01T07:51:05.184322Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"score_multi_log = cross_val_score(multi_log, X_train, y_train, cv=3, scoring='accuracy', n_jobs=-1)\nscore_multi_rf = cross_val_score(multi_rf, X_train, y_train, cv=3, scoring='accuracy', n_jobs=-1)\nscore_multi_sgd = cross_val_score(multi_sgd, X_train, y_train, cv=3, scoring='accuracy', n_jobs=-1)\nscore_multi_svc = cross_val_score(multi_svc, X_train, y_train, cv=3, scoring='accuracy', n_jobs=-1)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:55:11.990381Z","iopub.execute_input":"2024-08-01T07:55:11.991403Z","iopub.status.idle":"2024-08-01T07:58:36.424822Z","shell.execute_reply.started":"2024-08-01T07:55:11.991363Z","shell.execute_reply":"2024-08-01T07:58:36.423376Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"[score_multi_log, score_multi_rf, score_multi_sgd, score_multi_svc]","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:58:36.430501Z","iopub.execute_input":"2024-08-01T07:58:36.430909Z","iopub.status.idle":"2024-08-01T07:58:36.440698Z","shell.execute_reply.started":"2024-08-01T07:58:36.430874Z","shell.execute_reply":"2024-08-01T07:58:36.439342Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Feature Scaling","metadata":{}},{"cell_type":"code","source":"# normalizing feature data \nX_scaled = StandardScaler().fit_transform(X_train.astype('float64'))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:58:36.442385Z","iopub.execute_input":"2024-08-01T07:58:36.443553Z","iopub.status.idle":"2024-08-01T07:58:36.816382Z","shell.execute_reply.started":"2024-08-01T07:58:36.443514Z","shell.execute_reply":"2024-08-01T07:58:36.815343Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"multi_log_scaled = LogisticRegression(random_state=42).fit(X_scaled, y_train)\nmulti_rf_scaled = RandomForestClassifier(random_state=42).fit(X_scaled[:2000], y_train[:2000]) # only 2000 data points\nmulti_sgd_scaled = SGDClassifier(random_state=42).fit(X_scaled, y_train)\nmulti_svc_scaled = SVC(random_state=42).fit(X_scaled[:2000], y_train[:2000]) # only 2000 data points","metadata":{"execution":{"iopub.status.busy":"2024-08-01T07:58:36.819595Z","iopub.execute_input":"2024-08-01T07:58:36.820074Z","iopub.status.idle":"2024-08-01T08:01:54.050972Z","shell.execute_reply.started":"2024-08-01T07:58:36.820033Z","shell.execute_reply":"2024-08-01T08:01:54.04958Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"score_multi_log_scaled = cross_val_score(multi_log_scaled, X_scaled, y_train, cv=3, scoring='accuracy', n_jobs=-1)\nscore_multi_rf_scaled = cross_val_score(multi_rf_scaled, X_scaled, y_train, cv=3, scoring='accuracy', n_jobs=-1)\nscore_multi_sgd_scaled = cross_val_score(multi_sgd_scaled, X_scaled, y_train, cv=3, scoring='accuracy', n_jobs=-1)\nscore_multi_svc_scaled = cross_val_score(multi_svc_scaled, X_scaled, y_train, cv=3, scoring='accuracy', n_jobs=-1)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T08:01:54.052527Z","iopub.execute_input":"2024-08-01T08:01:54.052908Z","iopub.status.idle":"2024-08-01T08:07:47.706582Z","shell.execute_reply.started":"2024-08-01T08:01:54.052876Z","shell.execute_reply":"2024-08-01T08:07:47.705019Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"[score_multi_log_scaled, score_multi_rf_scaled, score_multi_sgd_scaled, score_multi_svc_scaled]","metadata":{"execution":{"iopub.status.busy":"2024-08-01T08:07:47.708798Z","iopub.execute_input":"2024-08-01T08:07:47.709192Z","iopub.status.idle":"2024-08-01T08:07:47.719147Z","shell.execute_reply.started":"2024-08-01T08:07:47.709153Z","shell.execute_reply":"2024-08-01T08:07:47.717867Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Choose SVC model.","metadata":{}},{"cell_type":"markdown","source":"## Error Analysis","metadata":{}},{"cell_type":"code","source":"y_train_pred = cross_val_predict(multi_svc_scaled, X_scaled, y_train, cv=3, n_jobs=-1)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T08:34:52.937987Z","iopub.execute_input":"2024-08-01T08:34:52.938694Z","iopub.status.idle":"2024-08-01T08:38:08.376757Z","shell.execute_reply.started":"2024-08-01T08:34:52.938655Z","shell.execute_reply":"2024-08-01T08:38:08.374791Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ConfusionMatrixDisplay.from_predictions(y_train, y_train_pred)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T08:38:46.733227Z","iopub.execute_input":"2024-08-01T08:38:46.733691Z","iopub.status.idle":"2024-08-01T08:38:47.332519Z","shell.execute_reply.started":"2024-08-01T08:38:46.733658Z","shell.execute_reply":"2024-08-01T08:38:47.331195Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ConfusionMatrixDisplay.from_predictions(y_train, y_train_pred, normalize='true', values_format='.0%') # normalized by row","metadata":{"execution":{"iopub.status.busy":"2024-08-01T08:38:53.437189Z","iopub.execute_input":"2024-08-01T08:38:53.438475Z","iopub.status.idle":"2024-08-01T08:38:54.099767Z","shell.execute_reply.started":"2024-08-01T08:38:53.438436Z","shell.execute_reply":"2024-08-01T08:38:54.098517Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ConfusionMatrixDisplay.from_predictions(y_train, y_train_pred, normalize='pred', values_format='.0%') # normalized by column","metadata":{"execution":{"iopub.status.busy":"2024-08-01T08:38:54.527145Z","iopub.execute_input":"2024-08-01T08:38:54.52858Z","iopub.status.idle":"2024-08-01T08:38:55.186403Z","shell.execute_reply.started":"2024-08-01T08:38:54.528543Z","shell.execute_reply":"2024-08-01T08:38:55.185186Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's see the error in 3rd column, 2% of predicted '2' labels are incorrect (actual is '3').","metadata":{}},{"cell_type":"markdown","source":"# Submission","metadata":{}},{"cell_type":"code","source":"X_test = pd.read_csv('/kaggle/input/digit-recognizer/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-08-01T08:41:40.352453Z","iopub.execute_input":"2024-08-01T08:41:40.35294Z","iopub.status.idle":"2024-08-01T08:41:42.355577Z","shell.execute_reply.started":"2024-08-01T08:41:40.352903Z","shell.execute_reply":"2024-08-01T08:41:42.354311Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T08:41:44.165498Z","iopub.execute_input":"2024-08-01T08:41:44.166488Z","iopub.status.idle":"2024-08-01T08:41:44.196787Z","shell.execute_reply.started":"2024-08-01T08:41:44.166451Z","shell.execute_reply":"2024-08-01T08:41:44.195599Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T08:41:48.207288Z","iopub.execute_input":"2024-08-01T08:41:48.207731Z","iopub.status.idle":"2024-08-01T08:41:48.228679Z","shell.execute_reply.started":"2024-08-01T08:41:48.207696Z","shell.execute_reply":"2024-08-01T08:41:48.227312Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test_scaled = StandardScaler().fit_transform(X_test.astype('float64'))\nX_test_scaled","metadata":{"execution":{"iopub.status.busy":"2024-08-01T08:41:53.80126Z","iopub.execute_input":"2024-08-01T08:41:53.801704Z","iopub.status.idle":"2024-08-01T08:41:54.217914Z","shell.execute_reply.started":"2024-08-01T08:41:53.801671Z","shell.execute_reply":"2024-08-01T08:41:54.21662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_test_pred = multi_svc_scaled.predict(X_test_scaled)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T08:44:55.836633Z","iopub.execute_input":"2024-08-01T08:44:55.837563Z","iopub.status.idle":"2024-08-01T08:45:21.187743Z","shell.execute_reply.started":"2024-08-01T08:44:55.837525Z","shell.execute_reply":"2024-08-01T08:45:21.186588Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({'ImageId': np.arange(1, 28001, 1), 'Label' : y_test_pred})\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T09:18:28.040553Z","iopub.execute_input":"2024-08-01T09:18:28.041016Z","iopub.status.idle":"2024-08-01T09:18:28.04751Z","shell.execute_reply.started":"2024-08-01T09:18:28.040982Z","shell.execute_reply":"2024-08-01T09:18:28.046194Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission","metadata":{"execution":{"iopub.status.busy":"2024-08-01T09:18:35.702472Z","iopub.execute_input":"2024-08-01T09:18:35.703505Z","iopub.status.idle":"2024-08-01T09:18:35.714571Z","shell.execute_reply.started":"2024-08-01T09:18:35.703471Z","shell.execute_reply":"2024-08-01T09:18:35.713354Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission.to_csv('/kaggle/working/submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T09:18:39.604674Z","iopub.execute_input":"2024-08-01T09:18:39.605123Z","iopub.status.idle":"2024-08-01T09:18:39.649374Z","shell.execute_reply.started":"2024-08-01T09:18:39.605088Z","shell.execute_reply":"2024-08-01T09:18:39.648322Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}